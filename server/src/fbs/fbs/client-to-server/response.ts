// @ts-nocheck
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BodyResponse, unionToBodyResponse, unionListToBodyResponse } from '../../fbs/client-to-server/body-response.js';


export class Response {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Response {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponse(bb:flatbuffers.ByteBuffer, obj?:Response):Response {
  return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponse(bb:flatbuffers.ByteBuffer, obj?:Response):Response {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

accepted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bodyType():BodyResponse {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BodyResponse.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

reason():string|null
reason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
reason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startResponse(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addAccepted(builder:flatbuffers.Builder, accepted:boolean) {
  builder.addFieldInt8(1, +accepted, +false);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:BodyResponse) {
  builder.addFieldInt8(2, bodyType, BodyResponse.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bodyOffset, 0);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, errorOffset, 0);
}

static addReason(builder:flatbuffers.Builder, reasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, reasonOffset, 0);
}

static endResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponse(builder:flatbuffers.Builder, id:number, accepted:boolean, bodyType:BodyResponse, bodyOffset:flatbuffers.Offset, errorOffset:flatbuffers.Offset, reasonOffset:flatbuffers.Offset):flatbuffers.Offset {
  Response.startResponse(builder);
  Response.addId(builder, id);
  Response.addAccepted(builder, accepted);
  Response.addBodyType(builder, bodyType);
  Response.addBody(builder, bodyOffset);
  Response.addError(builder, errorOffset);
  Response.addReason(builder, reasonOffset);
  return Response.endResponse(builder);
}
}
