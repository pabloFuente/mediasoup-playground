// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file mediasoup_tutorial.proto (package mediasoup, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message mediasoup.PrepareSenderRequest
 */
export class PrepareSenderRequest extends Message<PrepareSenderRequest> {
  /**
   * @generated from field: string room_name = 1;
   */
  roomName = "";

  constructor(data?: PartialMessage<PrepareSenderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mediasoup.PrepareSenderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareSenderRequest {
    return new PrepareSenderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareSenderRequest {
    return new PrepareSenderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareSenderRequest {
    return new PrepareSenderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareSenderRequest | PlainMessage<PrepareSenderRequest> | undefined, b: PrepareSenderRequest | PlainMessage<PrepareSenderRequest> | undefined): boolean {
    return proto3.util.equals(PrepareSenderRequest, a, b);
  }
}

/**
 * @generated from message mediasoup.PrepareSenderResponse
 */
export class PrepareSenderResponse extends Message<PrepareSenderResponse> {
  /**
   * @generated from field: optional mediasoup.Error error = 1;
   */
  error?: Error;

  /**
   * @generated from field: string router_rtp_capabilities = 2;
   */
  routerRtpCapabilities = "";

  /**
   * @generated from field: string transport_options = 3;
   */
  transportOptions = "";

  constructor(data?: PartialMessage<PrepareSenderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mediasoup.PrepareSenderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, opt: true },
    { no: 2, name: "router_rtp_capabilities", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transport_options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareSenderResponse {
    return new PrepareSenderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareSenderResponse {
    return new PrepareSenderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareSenderResponse {
    return new PrepareSenderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareSenderResponse | PlainMessage<PrepareSenderResponse> | undefined, b: PrepareSenderResponse | PlainMessage<PrepareSenderResponse> | undefined): boolean {
    return proto3.util.equals(PrepareSenderResponse, a, b);
  }
}

/**
 * @generated from message mediasoup.ConnectWebrtcTransportRequest
 */
export class ConnectWebrtcTransportRequest extends Message<ConnectWebrtcTransportRequest> {
  /**
   * @generated from field: string transport_id = 1;
   */
  transportId = "";

  /**
   * @generated from field: string dtls_parameters = 2;
   */
  dtlsParameters = "";

  constructor(data?: PartialMessage<ConnectWebrtcTransportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mediasoup.ConnectWebrtcTransportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dtls_parameters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectWebrtcTransportRequest {
    return new ConnectWebrtcTransportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectWebrtcTransportRequest {
    return new ConnectWebrtcTransportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectWebrtcTransportRequest {
    return new ConnectWebrtcTransportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectWebrtcTransportRequest | PlainMessage<ConnectWebrtcTransportRequest> | undefined, b: ConnectWebrtcTransportRequest | PlainMessage<ConnectWebrtcTransportRequest> | undefined): boolean {
    return proto3.util.equals(ConnectWebrtcTransportRequest, a, b);
  }
}

/**
 * @generated from message mediasoup.ConnectWebrtcTransportResponse
 */
export class ConnectWebrtcTransportResponse extends Message<ConnectWebrtcTransportResponse> {
  /**
   * @generated from field: optional mediasoup.Error error = 1;
   */
  error?: Error;

  /**
   * @generated from field: string transport_id = 2;
   */
  transportId = "";

  constructor(data?: PartialMessage<ConnectWebrtcTransportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mediasoup.ConnectWebrtcTransportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, opt: true },
    { no: 2, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectWebrtcTransportResponse {
    return new ConnectWebrtcTransportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectWebrtcTransportResponse {
    return new ConnectWebrtcTransportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectWebrtcTransportResponse {
    return new ConnectWebrtcTransportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectWebrtcTransportResponse | PlainMessage<ConnectWebrtcTransportResponse> | undefined, b: ConnectWebrtcTransportResponse | PlainMessage<ConnectWebrtcTransportResponse> | undefined): boolean {
    return proto3.util.equals(ConnectWebrtcTransportResponse, a, b);
  }
}

/**
 * @generated from message mediasoup.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: optional int32 code = 2;
   */
  code?: number;

  /**
   * @generated from field: optional string reason = 3;
   */
  reason?: string;

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mediasoup.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

