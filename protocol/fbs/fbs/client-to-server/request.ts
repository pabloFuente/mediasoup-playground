// @ts-nocheck
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BodyRequest, unionToBodyRequest, unionListToBodyRequest } from '../../fbs/client-to-server/body-request.js';
import { Method } from '../../fbs/client-to-server/method.js';


export class Request {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Request {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequest(bb:flatbuffers.ByteBuffer, obj?:Request):Request {
  return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequest(bb:flatbuffers.ByteBuffer, obj?:Request):Request {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

method():Method {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Method.PREPARE_SENDER;
}

bodyType():BodyRequest {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BodyRequest.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startRequest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addMethod(builder:flatbuffers.Builder, method:Method) {
  builder.addFieldInt8(1, method, Method.PREPARE_SENDER);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:BodyRequest) {
  builder.addFieldInt8(2, bodyType, BodyRequest.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bodyOffset, 0);
}

static endRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequest(builder:flatbuffers.Builder, id:number, method:Method, bodyType:BodyRequest, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Request.startRequest(builder);
  Request.addId(builder, id);
  Request.addMethod(builder, method);
  Request.addBodyType(builder, bodyType);
  Request.addBody(builder, bodyOffset);
  return Request.endRequest(builder);
}
}
